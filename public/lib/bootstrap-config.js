/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/(() => {
  // webpackBootstrap
  /******/var __webpack_modules__ = {

    /***/"./index.js":
    /*!******************!*\
      !*** ./index.js ***!
      \******************/
    /***/() => {

        eval("(function () {\r\n    document.addEventListener('DOMContentLoaded', function () {\r\n        document.getElementById('searchForm').addEventListener('submit', function (e) {\r\n            e.preventDefault();\r\n\r\n            let searchQuery = document.getElementById('search').value;\r\n\r\n            if (searchQuery) {\r\n                let xhr = new XMLHttpRequest();\r\n                xhr.open('POST', '<?= site_url(\"admin/manage-data/search\") ?>', true);\r\n                xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n                xhr.onload = function () {\r\n                    if (xhr.status === 200) {\r\n                        let response = JSON.parse(xhr.responseText);\r\n                        let output = document.getElementById('output');\r\n                        output.innerHTML = '';\r\n\r\n                        if (response.length > 0) {\r\n                            let resultHTML = '<table class=\"table table-bordered table-striped\">';\r\n                            resultHTML += '<tbody>';\r\n\r\n                            response.forEach(function (item, index) {\r\n                                resultHTML += `<tr>\r\n                        <td>${index + 1}</td>\r\n                        <td><img src=\"<?= base_url() ?>/${item.image}\" alt=\"Gambar Buku\" style=\"width: 100px;\"></td>\r\n                        <td>${item.nama}</td>\r\n                        <td>${item.deskripsi}</td>\r\n                        <td>\r\n                            <button class=\"btn btn-warning btn-sm edit\" data-id=\"${item.id}\" data-nama=\"${item.nama}\" data-deskripsi=\"${item.deskripsi}\" data-toggle=\"modal\" data-target=\"#editModal\">Edit</button>\r\n                            <button class=\"btn btn-danger btn-sm delete\" data-id=\"${item.id}\" data-toggle=\"modal\" data-target=\"#deleteModal\">Delete</button>\r\n                        </td>\r\n                    </tr>`;\r\n                            });\r\n                            resultHTML += '</tbody></table><br><hr />';\r\n                            output.innerHTML = resultHTML;\r\n                        } else {\r\n                            output.innerHTML = '<p class=\"text-center\">Tidak ada data yang ditemukan.</p>';\r\n                        }\r\n                    } else {\r\n                        alert('Terjadi kesalahan saat mengambil data.');\r\n                    }\r\n                };\r\n\r\n                xhr.onerror = function () {\r\n                    alert('Terjadi kesalahan saat mengirim permintaan.');\r\n                };\r\n\r\n                xhr.send(`search=${encodeURIComponent(searchQuery)}`);\r\n            } else {\r\n                document.getElementById('output').innerHTML = '<p class=\"text-center\">Masukkan kata kunci untuk mencari.</p>';\r\n            }\r\n        });\r\n\r\n        document.addEventListener('click', function (e) {\r\n            if (e.target.classList.contains('edit')) {\r\n                let id = e.target.getAttribute('data-id');\r\n                let nama = e.target.getAttribute('data-nama');\r\n                let deskripsi = e.target.getAttribute('data-deskripsi');\r\n\r\n                document.getElementById('edit-id').value = id;\r\n                document.getElementById('edit-nama').value = nama;\r\n                document.getElementById('edit-deskripsi').value = deskripsi;\r\n            }\r\n            if (e.target.classList.contains('delete')) {\r\n                let id = e.target.getAttribute('data-id');\r\n                document.getElementById('deleteId').value = id;\r\n            }\r\n        });\r\n    });\r\n    document.querySelectorAll('.edit').forEach(element => {\r\n        element.addEventListener('click', async (e) => {\r\n            e.preventDefault();\r\n            const id = element.dataset.id;\r\n            try {\r\n                const response = await fetch(`<?= site_url(\"/admin/manage-data/edit/\") ?>${id}`);\r\n\r\n                if (!response.ok) throw new Error('Gagal mengambil data.');\r\n                const data = await response.json();\r\n\r\n                if (data.status === 'error') {\r\n                    throw new Error(data.message);\r\n                }\r\n                document.getElementById('edit-id').value = data.id;\r\n                document.getElementById('edit-nama').value = data.nama;\r\n                document.getElementById('edit-deskripsi').value = data.deskripsi;\r\n                document.getElementById('edit-status').value = data.status_data;\r\n                $('#editModal').modal('show');\r\n            } catch (error) {\r\n                alert('Gagal mengambil data: ' + error.message);\r\n            }\r\n        });\r\n    });\r\n    document.getElementById('editForm').addEventListener('submit', async (event) => {\r\n        event.preventDefault();\r\n        const id = document.getElementById('edit-id').value;\r\n\r\n        if (!validateForm()) {\r\n            alert('Form tidak valid, silakan periksa kembali.');\r\n            return;\r\n        }\r\n        try {\r\n            const response = await fetch(`<?= site_url(\"/admin/manage-data/edit/\") ?>${id}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded',\r\n                },\r\n                body: new URLSearchParams(new FormData(event.target)).toString(),\r\n            });\r\n            if (!response.ok) throw new Error('Gagal memperbarui data.');\r\n            const result = await response.json();\r\n\r\n            if (result.status === 'success') {\r\n                location.reload();\r\n            } else {\r\n                throw new Error(result.message);\r\n            }\r\n        } catch (error) {\r\n            alert('Gagal memperbarui data: ' + error.message);\r\n        }\r\n    });\r\n    document.getElementById('addForm').addEventListener('submit', async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!addValidate()) {\r\n            alert('Form tidak valid, silakan periksa kembali.');\r\n            return;\r\n        } else if (!imageUpload()) {\r\n            alert('Gambar buku belum dipilih.');\r\n            return;\r\n        }\r\n        const formData = new FormData(event.target);\r\n        try {\r\n            const response = await fetch(`<?= site_url(\"/admin/manage-data/add/\") ?>`, {\r\n                method: 'POST',\r\n                body: formData,\r\n            });\r\n            if (!response.ok) throw new Error('Gagal menyimpan data.');\r\n            const result = await response.json();\r\n\r\n            if (result.status === 'success') {\r\n                location.reload();\r\n            } else {\r\n                throw new Error(result.message);\r\n            }\r\n        } catch (error) {\r\n            alert('Gagal menyimpan data: ' + error.message);\r\n        }\r\n    });\r\n    document.querySelectorAll('.delete').forEach(element => {\r\n        element.addEventListener('click', async (e) => {\r\n            e.preventDefault();\r\n            const id = element.dataset.id;\r\n            try {\r\n                const response = await fetch(`<?= site_url(\"/admin/manage-data/delete/\") ?>${id}`, {\r\n                    method: 'DELETE'\r\n                });\r\n                if (!response.ok) throw new Error('Gagal menghapus data.');\r\n                const result = await response.json();\r\n\r\n                if (result.status === 'success') {\r\n                    location.reload();\r\n                } else {\r\n                    throw new Error(result.message);\r\n                }\r\n            } catch (error) {\r\n                alert('Gagal menghapus data: ' + error.message);\r\n            }\r\n        });\r\n    });\r\n    function validateForm() {\r\n        const nama = document.getElementById('edit-nama').value;\r\n        const deskripsi = document.getElementById('edit-deskripsi').value;\r\n        const status = document.getElementById('edit-status').value;\r\n\r\n        return nama.trim() !== '' && deskripsi.trim() !== '' && status.trim() !== '';\r\n    }\r\n    function addValidate() {\r\n        const add = document.getElementById('tambah-nama').value;\r\n        const addDeskripsi = document.getElementById('tambah-deskripsi').value;\r\n\r\n        return add.trim() !== '' && addDeskripsi.trim() !== '';\r\n    }\r\n    function imageUpload() {\r\n        const file = document.getElementById('gambar').files[0];\r\n        return file !== undefined;\r\n    }\r\n})();\n\n//# sourceURL=webpack://web-pack/./index.js?");

        /***/
      }
  
      /******/ };
    /************************************************************************/
    /******/
    /******/ // startup
    /******/ // Load entry module and return exports
    /******/ // This entry module can't be inlined because the eval devtool is used.
    /******/var __webpack_exports__ = {};
    /******/__webpack_modules__["./index.js"]();
    /******/
    /******/
  })();